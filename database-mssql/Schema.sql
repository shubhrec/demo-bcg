USE [DEMO_BCG]
GO
/****** Object:  Table [LIVE].[POLICY_DETAILS]    Script Date: 11/29/2021 1:03:42 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [LIVE].[POLICY_DETAILS](
	[POLICY_ID] [int] NOT NULL,
	[DATE_OF_PURCHASE] [datetime2](7) NOT NULL,
	[CUSTOMER_ID] [int] NOT NULL,
	[FUEL] [nvarchar](50) NOT NULL,
	[VEHICLE_SEGMENT] [nvarchar](50) NOT NULL,
	[PREMIUM] [int] NOT NULL,
	[BODILY_INJURY_LIABILITY] [nvarchar](50) NOT NULL,
	[PERSONAL_INJURY_PROTECTION] [nvarchar](50) NOT NULL,
	[PROPERTY_DAMAGE_LIABILITY] [nvarchar](50) NOT NULL,
	[COLLISION] [nvarchar](50) NOT NULL,
	[COMPREHENSIVE] [nvarchar](50) NOT NULL,
	[LAST_MODIFIED] [datetime] NULL,
PRIMARY KEY CLUSTERED 
(
	[POLICY_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [LIVE].[CUSTOMER_DATA]    Script Date: 11/29/2021 1:03:43 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [LIVE].[CUSTOMER_DATA](
	[CUSTOMER_ID] [int] NOT NULL,
	[CUSTOMER_GENDER] [nvarchar](50) NOT NULL,
	[CUSTOMER_INCOME_GROUP] [nvarchar](50) NOT NULL,
	[CUSTOMER_REGION] [nvarchar](50) NOT NULL,
	[Customer_Marital_status] [nvarchar](50) NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[CUSTOMER_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [LIVE].[POSSIBLE_SEARCH_PARAMETERS]    Script Date: 11/29/2021 1:03:43 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE view [LIVE].[POSSIBLE_SEARCH_PARAMETERS]
AS
SELECT DISTINCT POLICY_ID AS SEARCHABLE FROM LIVE.POLICY_DETAILS
UNION 
SELECT DISTINCT CUSTOMER_ID FROM LIVE.CUSTOMER_DATA
GO
/****** Object:  View [LIVE].[MONTH_REGIION_WISE_NUMBER_OF_POLICIES]    Script Date: 11/29/2021 1:03:43 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

 CREATE VIEW [LIVE].[MONTH_REGIION_WISE_NUMBER_OF_POLICIES]
 AS
 SELECT DATENAME(MM,DATE_OF_PURCHASE) AS MONTH, CUSTOMER_REGION, DATEPART(mm,DATE_OF_PURCHASE) MONTH_NUM, COUNT(*) AS NUMBER_OF_POLICIES
 FROM LIVE.POLICY_DETAILS P 
 INNER JOIN LIVE.CUSTOMER_DATA C ON P.CUSTOMER_ID = C.CUSTOMER_ID
 GROUP BY DATENAME(MM,DATE_OF_PURCHASE), CUSTOMER_REGION,DATEPART(mm,DATE_OF_PURCHASE) 

 union 

  SELECT DATENAME(MM,DATE_OF_PURCHASE) AS MONTH, 'All' as CUSTOMER_REGION, DATEPART(mm,DATE_OF_PURCHASE) MONTH_NUM, COUNT(*) AS NUMBER_OF_POLICIES
 FROM LIVE.POLICY_DETAILS P 
 INNER JOIN LIVE.CUSTOMER_DATA C ON P.CUSTOMER_ID = C.CUSTOMER_ID
 GROUP BY DATENAME(MM,DATE_OF_PURCHASE),DATEPART(mm,DATE_OF_PURCHASE) 
GO
/****** Object:  View [LIVE].[MONTH_REGION_WISE_PREMIUM]    Script Date: 11/29/2021 1:03:43 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 CREATE VIEW  [LIVE].[MONTH_REGION_WISE_PREMIUM]
 AS
  SELECT DATENAME(MM,DATE_OF_PURCHASE) AS MONTH, CUSTOMER_REGION, DATEPART(mm,DATE_OF_PURCHASE) MONTH_NUM, SUM(PREMIUM) AS TOTAL_PREMIUM
 FROM LIVE.POLICY_DETAILS P 
 INNER JOIN LIVE.CUSTOMER_DATA C ON P.CUSTOMER_ID = C.CUSTOMER_ID
 GROUP BY DATENAME(MM,DATE_OF_PURCHASE), CUSTOMER_REGION,DATEPART(mm,DATE_OF_PURCHASE) 

 union 

  SELECT DATENAME(MM,DATE_OF_PURCHASE) AS MONTH, 'All' as CUSTOMER_REGION, DATEPART(mm,DATE_OF_PURCHASE) MONTH_NUM, SUM(PREMIUM) AS TOTAL_PREMIUM
 FROM LIVE.POLICY_DETAILS P 
 INNER JOIN LIVE.CUSTOMER_DATA C ON P.CUSTOMER_ID = C.CUSTOMER_ID
 GROUP BY DATENAME(MM,DATE_OF_PURCHASE),DATEPART(mm,DATE_OF_PURCHASE) 
GO
/****** Object:  Table [STG].[ORIGINAL_DATASET]    Script Date: 11/29/2021 1:03:43 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [STG].[ORIGINAL_DATASET](
	[Policy_id] [int] NOT NULL,
	[Date_of_Purchase] [datetime2](7) NOT NULL,
	[Customer_id] [int] NOT NULL,
	[Fuel] [nvarchar](50) NOT NULL,
	[VEHICLE_SEGMENT] [nvarchar](50) NOT NULL,
	[Premium] [int] NOT NULL,
	[bodily_injury_liability] [nvarchar](50) NOT NULL,
	[personal_injury_protection] [nvarchar](50) NOT NULL,
	[property_damage_liability] [nvarchar](50) NOT NULL,
	[collision] [nvarchar](50) NOT NULL,
	[comprehensive] [nvarchar](50) NOT NULL,
	[Customer_Gender] [nvarchar](50) NOT NULL,
	[Customer_Income_group] [nvarchar](50) NOT NULL,
	[Customer_Region] [nvarchar](50) NOT NULL,
	[Customer_Marital_status] [nvarchar](50) NOT NULL
) ON [PRIMARY]
GO
ALTER TABLE [LIVE].[POLICY_DETAILS] ADD  DEFAULT (getdate()) FOR [LAST_MODIFIED]
GO
ALTER TABLE [LIVE].[POLICY_DETAILS]  WITH CHECK ADD FOREIGN KEY([CUSTOMER_ID])
REFERENCES [LIVE].[CUSTOMER_DATA] ([CUSTOMER_ID])
GO
/****** Object:  StoredProcedure [LIVE].[UPDATE_POLICY_DETAILS_IF_UNCHANGED]    Script Date: 11/29/2021 1:03:43 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [LIVE].[UPDATE_POLICY_DETAILS_IF_UNCHANGED]
@POLICY_ID INT
      ,@CUSTOMER_ID INT
      ,@FUEL NVARCHAR
      ,@VEHICLE_SEGMENT NVARCHAR
      ,@PREMIUM INT
      ,@BODILY_INJURY_LIABILITY NVARCHAR
      ,@PERSONAL_INJURY_PROTECTION NVARCHAR
      ,@PROPERTY_DAMAGE_LIABILITY NVARCHAR
      ,@COLLISION NVARCHAR
      ,@COMPREHENSIVE NVARCHAR
	  ,@LAST_MODIFIED DATETIME
AS
BEGIN

--Check if the last_modified is same and update if it is

IF @LAST_MODIFIED = (SELECT LAST_MODIFIED FROM LIVE.[POLICY_DETAILS] WHERE POLICY_ID = @POLICY_ID)
	BEGIN

		UPDATE LIVE.[POLICY_DETAILS] SET 
	   [CUSTOMER_ID] = @CUSTOMER_ID
      ,[FUEL] = @FUEL
      ,[VEHICLE_SEGMENT] = @VEHICLE_SEGMENT
      ,[PREMIUM] = @PREMIUM
      ,[BODILY_INJURY_LIABILITY] = @BODILY_INJURY_LIABILITY
      ,[PERSONAL_INJURY_PROTECTION] = @PERSONAL_INJURY_PROTECTION
      ,[PROPERTY_DAMAGE_LIABILITY] = @PROPERTY_DAMAGE_LIABILITY
      ,[COLLISION] = @COLLISION
      ,[COMPREHENSIVE] = @COMPREHENSIVE
	  WHERE POLICY_ID = @POLICY_ID

	  SELECT TOP 50 *
  FROM [DEMO_BCG].[LIVE].[POLICY_DETAILS] ORDER BY DATE_OF_PURCHASE DESC


	  return 200 

	END

--In case the table was updated in between
ELSE

	BEGIN

		  SELECT TOP 50 *
  FROM [DEMO_BCG].[LIVE].[POLICY_DETAILS]  ORDER BY DATE_OF_PURCHASE DESC

		return 202
	END







END
GO
